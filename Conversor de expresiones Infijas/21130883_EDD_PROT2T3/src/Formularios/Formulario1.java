
package Formularios;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import javax.swing.JButton;
import javax.swing.JOptionPane;

public class Formulario1 extends javax.swing.JFrame {

    Queue <Character> cola;
    Stack <Character> pilaOperadores;
    Stack <Character> pilaSalida;
    Stack <Character> pilaAux;
    String expresion;
    int index1,index2;
    
    public Formulario1() {
        initComponents();
        setLocationRelativeTo(null);
        pilaOperadores = new Stack();
        pilaSalida = new Stack();
        pilaAux = new Stack();
        cola = new LinkedList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTF_Expresion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCB_Opciones = new javax.swing.JComboBox<>();
        jLabl_Resultado = new javax.swing.JLabel();
        jBut_Convertir = new javax.swing.JButton();
        jBut_Verificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("EXPRESION EN NOTACION INFIJA");

        jLabel2.setText("PASAR DE INFIJA A...");

        jCB_Opciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "PREFIJA", "SUFIJA" }));

        jLabl_Resultado.setBackground(new java.awt.Color(0, 255, 255));
        jLabl_Resultado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabl_Resultado.setOpaque(true);

        jBut_Convertir.setText("Convertir");
        jBut_Convertir.setEnabled(false);
        jBut_Convertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBut_ConvertirActionPerformed(evt);
            }
        });

        jBut_Verificar.setText("Verificar");
        jBut_Verificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBut_VerificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCB_Opciones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jTF_Expresion)
                            .addComponent(jLabl_Resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBut_Convertir)
                            .addComponent(jBut_Verificar))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTF_Expresion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBut_Verificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCB_Opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBut_Convertir))
                .addGap(18, 18, 18)
                .addComponent(jLabl_Resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBut_ConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBut_ConvertirActionPerformed
        
        expresion = this.jTF_Expresion.getText();
        int cont = expresion.length();
            
        switch(this.jCB_Opciones.getSelectedItem().toString()){
            case "PREFIJA":
                expresion = invertirCadena(expresion);
                
                //Se pasa la cadena invertida a la cola
                for(int i=0; i<cont;i++){
                    cola.add(expresion.charAt(i));
                    
                }
                
                while(!cola.isEmpty()){
                    if(!esOperador(cola.peek())){
                        pilaSalida.push(cola.remove());
                    }else if(pilaOperadores.isEmpty()){
                            pilaOperadores.push(cola.remove());
                    }
                    else if(prioridadPre(cola.peek())>prioridadPre(pilaOperadores.peek()) || prioridadPre(cola.peek())==0){
                        pilaOperadores.push(cola.remove());
                    }else if(prioridadPre(cola.peek())<=prioridadPre(pilaOperadores.peek())){
                            pilaSalida.push(pilaOperadores.pop());
                            pilaOperadores.push(cola.remove());
                            
                    }
                    if(!pilaOperadores.empty() && prioridadPre(pilaOperadores.peek()) == 4){
                        pilaOperadores.pop();
                        while(pilaOperadores.peek()!=')')
                            pilaSalida.push(pilaOperadores.pop());
                        pilaOperadores.pop();
                            
                    }
                   
                }
                
                while(!pilaOperadores.isEmpty())
                    pilaSalida.push(pilaOperadores.pop());
                
                String cad = "";
                
                while(!pilaSalida.isEmpty())
                    cad = cad+pilaSalida.pop();
                
                this.jLabl_Resultado.setText(cad);
                this.jBut_Convertir.setEnabled(false);
 
                break;
                
            case "SUFIJA":
                
                expresion = this.jTF_Expresion.getText();
                for(int i=0; i<cont;i++){
                    cola.add(expresion.charAt(i));   
                }
                
                while(!cola.isEmpty()){
                    if(!esOperador(cola.peek())){
                        pilaSalida.push(cola.remove());
                    }else if(pilaOperadores.isEmpty()){
                            pilaOperadores.push(cola.remove());
                    }else if(prioridadSuf(cola.peek())>prioridadSuf(pilaOperadores.peek()) || prioridadSuf(cola.peek())==0){
                        pilaOperadores.push(cola.remove());
                    }else if(prioridadSuf(cola.peek())<=prioridadSuf(pilaOperadores.peek())){
                            pilaSalida.push(pilaOperadores.pop());
                            pilaOperadores.push(cola.remove());
                            
                    }
                    if(!pilaOperadores.empty() && pilaOperadores.peek()==')'){
                        pilaOperadores.pop();
                        while(pilaOperadores.peek()!='(')
                            pilaSalida.push(pilaOperadores.pop());
                        pilaOperadores.pop();
                    }
                    
                    
                }
                
                
                
                while(!pilaOperadores.isEmpty())
                    pilaSalida.push(pilaOperadores.pop());
                
                Stack <Character> aux = new Stack();
                
                while(!pilaSalida.isEmpty()){
                    aux.push(pilaSalida.pop());
                }
                
                
                cad = "";
                
                while(!aux.isEmpty())
                    cad = cad+aux.pop();
                
                this.jLabl_Resultado.setText(cad);
                this.jBut_Convertir.setEnabled(false);
                
                break;
        }
        
    }//GEN-LAST:event_jBut_ConvertirActionPerformed

    private void jBut_VerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBut_VerificarActionPerformed
        
        expresion = this.jTF_Expresion.getText();
        this.parentesis(expresion,this.jBut_Convertir);
        
        
    }//GEN-LAST:event_jBut_VerificarActionPerformed

    public String invertirCadena(String cad){
        String cadenaInvertida = "";
        for (int i = cad.length() - 1; i >= 0; i--)
            cadenaInvertida = cadenaInvertida + cad.charAt(i);
        return cadenaInvertida;
    }
    
    public void parentesis(String cad, JButton boton){
        
        int cierra=0, abre=0;
        for(int i=0; i<cad.length();i++){
            if(cad.charAt(i) == '(')
                abre++;
            else if(cad.charAt(i) == ')')
                cierra++;
        }
        
        if(cierra != abre)
            JOptionPane.showMessageDialog(null, "LA EXPRESION NO TIENE EL MISMO NUMERO DE PARENTESIS TANTO QUE ABREN COMO QUE CIERRAN!!!");
        else if(cad.equals(""))
            JOptionPane.showMessageDialog(rootPane, "POR FAVOR INGRESE UNA EXPRESION");
        else{
            JOptionPane.showMessageDialog(null, "LA EXPRESION ESTA CORRECTA!!!");
            boton.setEnabled(true);
        }
    }
    
    public int prioridadPre(char c){
        if(c == ')')
            return 0;
        else if(c == '+' || c == '-')
            return 1;
        else if(c == '*' || c == '/')
            return 2;
        else if(c == '^')
            return 3;
        else if(c == '(')
            return 4;
        else 
            return -1;
    }
    
    public int prioridadSuf(char c){
        if(c == '(')
            return 0;
        else if(c == '+' || c == '-')
            return 1;
        else if(c == '*' || c == '/')
            return 2;
        else if(c == '^')
            return 3;
        else 
            return -1;
    }
    
    public boolean esOperador(char c){
        if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '(' || c == ')' )
            return true;
        else 
            return false;
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBut_Convertir;
    private javax.swing.JButton jBut_Verificar;
    private javax.swing.JComboBox<String> jCB_Opciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabl_Resultado;
    private javax.swing.JTextField jTF_Expresion;
    // End of variables declaration//GEN-END:variables
}
